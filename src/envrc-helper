#!/bin/bash

if [ ! -d .git ]; then
  echo "execute this command in a git repository root."
  exit 1
fi

# --------------------------------
# // MARK: Functions
function show_usage() {
  cat << EOS
envrc-helper usage:
    envrc-helper COMMAND [ARGUMENTS ...]

    COMMAND and ARGUMENTS:
        init: creates .envrc file and .envrc.template file and creates/updates .gitignore file.

        add NAME VALUE: adds NAME as an environment variable to .envrc and .envrc.template.

        remove NAME: removes NAME environment variable from .envrc and .envrc.template.

        create: creates .envrc file from .envrc.template.
EOS
}

function is_empty() {
  file_name=$1

  if [ $(wc -l $file_name | awk '{ print $1 }') -eq 0 ]; then
    true
  else
    false
  fi
}

function find_variable() {
  variable_name=$1
  file_name=$2

  grep "^export $1=" $file_name > /dev/null
}

function remove_variable() {
  variable_name=$1
  file_name=$2

  new_lines=$(sed /^export\ $variable_name=/d $file_name)
  echo -ne "$new_lines" > $file_name
}

function ends_with_newline() {
  file_name=$1

  if [ $(tail -1 $file_name | wc -l) -eq 1 ];then
    true
  else
    false
  fi
}

command=$1

if [ "$command" = "init" ]; then
  # --------------------------------
  # // MARK: init

  # .envrcの作成
  if [ ! -e .envrc ]; then
    touch .envrc
    direnv allow
    echo "created .envrc"
  fi

  # .envrc.templateの作成
  if [ ! -e .envrc.template ]; then
    touch .envrc.template
    if [ -e ~/.envrc.default ]; then
      cat ~/.envrc.default > .envrc.template
    fi
    echo "created .envrc.template"
  fi

  # .gitignoreへの追記
  cat .gitignore 2>/dev/null | grep ^.envrc$ > /dev/null
  if [ $? -ne 0 ]; then
    echo -e "\n.envrc" >> .gitignore
  fi

elif [ "$command" = "add" ]; then
  # --------------------------------
  # // MARK: add

  variable_name=$2
  variable_value=$3

  find_variable $variable_name .envrc
  if [ $? -eq 0 ]; then
    echo "$variable_name already exists in the .envrc"
  else
    if ! is_empty .envrc && ! ends_with_newline .envrc; then
      echo -e "" >> .envrc
    fi

    echo "export $variable_name=$variable_value" >> .envrc

    direnv allow
  fi

  find_variable $variable_name .envrc.template
  if [ $? -eq 0 ]; then
    echo "$variable_name already exists in the .envrc.template"
  else
    if ! is_empty .envrc.template && ! ends_with_newline .envrc.template; then
      echo -e "" >> .envrc.template
    fi

    echo "export $variable_name=" >> .envrc.template
  fi

elif [ "$command" = "remove" ]; then
  # --------------------------------
  # // MARK: remove

  variable_name=$2

  remove_variable $variable_name .envrc
  remove_variable $variable_name .envrc.template

  direnv allow

elif [ "$command" = "create" ]; then
  # --------------------------------
  # // MARK: create

  cp .envrc.template .envrc

else
  # --------------------------------
  # // MARK: unknown

  echo "unknown command: \"$command\""
  show_usage
  exit 1

fi